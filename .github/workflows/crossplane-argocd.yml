# Bootstrap Crossplane with ArgoCD.
# Uses LocalStack with Helm as underlying API to deploy AWS infrastructure.
name: crossplane-argocd

on: [push,pull_request,workflow_dispatch]

env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Spin up kinD
        run: |
          kind --version
          kind create cluster --config kind/config.yaml
          kubectl get nodes

      - name: Install ArgoCD into kind
        run: |
          echo " Install & configure ArgoCD via Kustomize - see https://stackoverflow.com/a/71692892/4964553"
          kubectl apply -k argocd/install

          echo "--- Wait for Argo to become ready"
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server --namespace argocd --timeout=300s

      - name: Prepare crossplane AWS Secret
        run: |
          echo "--- Create aws-creds.conf file"
          echo "[default]
          aws_access_key_id = $AWS_ACCESS_KEY_ID
          aws_secret_access_key = $AWS_SECRET_ACCESS_KEY
          #endpoint_url = http://localstack.default.svc:4566
          #endpoint_url = http://host.docker.internal:4566
          " > aws-creds.conf

          echo "--- Create a namespace for crossplane"
          kubectl create namespace crossplane-system

          echo "--- Create AWS Provider secret"
          kubectl create secret generic aws-creds -n crossplane-system --from-file=creds=./aws-creds.conf

      - name: Prepare Secret with ArgoCD API Token for Crossplane ArgoCD Provider
        run: |
          echo "--- Access the ArgoCD server with a port-forward in the background, see https://stackoverflow.com/a/72983554/4964553"
          kubectl port-forward -n argocd --address='0.0.0.0' service/argocd-server 8443:443 &

          echo "--- Wait shortly to let the port forward come available"
          sleep 1

          bash ./scripts/create-argocd-api-token-secret.sh

      - name: Use ArgoCD's AppOfApps pattern to deploy all Crossplane components
        run: |
          kubectl apply -n argocd -f argocd/crossplane-bootstrap.yaml

      - name: Check crossplane status
        run: |
          echo "--- Wait for crossplane to become ready (now prefaced with until as described in https://stackoverflow.com/questions/68226288/kubectl-wait-not-working-for-creation-of-resources)"
          until kubectl wait --for=condition=PodScheduled pod -l app=crossplane --namespace crossplane-system --timeout=120s > /dev/null 2>&1; do : ; done
          kubectl wait --for=condition=ready pod -l app=crossplane --namespace crossplane-system --timeout=120s

          echo "--- Wait until AWS Provider is up and running (now prefaced with until to prevent Error from server (NotFound): providers.pkg.crossplane.io 'upbound-provider-aws-s3' not found)"
          until kubectl get provider/upbound-provider-aws-s3 > /dev/null 2>&1; do : ; done
          kubectl wait --for=condition=healthy --timeout=180s provider/upbound-provider-aws-s3

          kubectl get all -n crossplane-system

      - name: Install LocalStack and AWS infra
        run: |
          helm repo add localstack-repo https://helm.localstack.cloud
          helm upgrade --install localstack localstack-repo/localstack \
            --namespace localstack --create-namespace

          echo "--- Wait for LocalStack to become ready (now prefaced with until as described in https://stackoverflow.com/questions/68226288/kubectl-wait-not-working-for-creation-of-resources)"
          until kubectl wait --for=condition=PodScheduled pod -l app.kubernetes.io/name=localstack --namespace localstack --timeout=120s > /dev/null 2>&1; do : ; done
          kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=localstack --namespace localstack --timeout=120s

          echo "--- Install AWS infrastructure on LocalStack"
          kubectl apply -f argocd/infrastructure/aws-s3-localstack.yaml

      - name: Get Crossplane resources
        run: |
          kubectl get providers
          kubectl get ProviderConfig -A
          kubectl get managed || true
          kubectl get buckets

      # Disabled since we use localstack inside kinD
      - name: AWS-cli status
        if: false
        run: |
          export AWS_PAGER=""
          export AWS_CONFIG_FILE=./aws-creds.conf
          export AWS_ENDPOINT_URL=http://localhost:4566
          aws sts get-caller-identity
          aws s3api list-buckets
          # aws iam create-user --user-name dev
          # aws iam attach-user-policy --user-name dev --policy-arn=arn:aws:iam::aws:policy/AmazonEC2FullAccess

      - name: Debug failure
        if: failure()
        run: |
          helm list -A
          kubectl get all,cm,sa -A
          kubectl get events --sort-by='.metadata.creationTimestamp' -A
          kubectl -n argocd logs --selector app.kubernetes.io/name=argocd-application-controller

      - name: Cleanup
        if: always()
        run: |
          kubectl delete managed --all || true
